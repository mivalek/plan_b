// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  isAdmin    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  myBoulders MyBoulder[]
}

model MyBoulder {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  boulder    Boulder   @relation(fields: [boulderId], references: [id])
  boulderId  String
  attempts   Attempt[]
  repeats    Int
  done       Boolean   @default(false)
  difficulty Int
  rating     Int
}

model Attempt {
  id        Int       @id @default(autoincrement())
  boulder   MyBoulder @relation(fields: [boulderId], references: [id])
  boulderId Int
  // user   User @relation(fields: [userId], references: [id])
  // userId Int
  success   Boolean
  createdAt DateTime  @default(now())
}

model Setter {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  boulders  Boulder[]
  createdAt DateTime  @default(now())
}

model Boulder {
  id         String      @id
  name       String?
  setter     Setter      @relation(fields: [setterId], references: [id])
  setterId   Int
  position   Int[]
  location   String
  room       String
  difficulty Int
  holdColors String[]
  tags       String[]
  climbers   MyBoulder[]
  createdAt  DateTime    @default(now())
}
